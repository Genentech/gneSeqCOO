[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Genentech, Inc. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/gneSeqCOO.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Predicting COO for RNASeq data","text":"vignette details concise example running COO classifier new RNASeq dataset. example run Rescomp3 HPC cluster Genentech, uses raw data output Genentech sequencing pipeline.","code":""},{"path":"/articles/gneSeqCOO.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the data","title":"Predicting COO for RNASeq data","text":"COO classifier requires supply raw count matrix, supplied Genentech’s RNASeq processing pipeline. prediction model fit using “stranded count” data, best performance recommend use dataset. Theoretically program may work unstranded counts, data normalized different way, can’t guarantee consistent results. can classify samples, convert data DESeqDataSet. SummarizedExperiments, simple: Alternatively, data formatted matrix, use following command: Note order classifier work, necessary row names CDS correct format. classifier expects row names “Gene IDs”, e.g. “GeneID:9294”, genes used model must present dataset. standard model, 21 genes, following IDs:","code":"library(DESeq2) cds = DESeqDataSet(strandedCtSummary,design=~1) ## counts is a matrix, with rows of features and columns of samples. cds = DESeqDataSetFromMatrix(counts,   colData=data.frame(ID=colnames(counts)),   rowData=data.frame(ID=rownames(counts)),   design=~1) ##  [1] \"`GeneID:10538`\"  \"`GeneID:10672`\"  \"`GeneID:11040`\"  \"`GeneID:152137`\" ##  [5] \"`GeneID:23139`\"  \"`GeneID:23495`\"  \"`GeneID:26278`\"  \"`GeneID:3055`\"   ##  [9] \"`GeneID:327657`\" \"`GeneID:3662`\"   \"`GeneID:3707`\"   \"`GeneID:4311`\"   ## [13] \"`GeneID:4603`\"   \"`GeneID:51700`\"  \"`GeneID:54836`\"  \"`GeneID:55534`\"  ## [17] \"`GeneID:64764`\"  \"`GeneID:6597`\"   \"`GeneID:79754`\"  \"`GeneID:8994`\"   ## [21] \"`GeneID:9294`\""},{"path":"/articles/gneSeqCOO.html","id":"applying-the-coo-classifier","dir":"Articles","previous_headings":"","what":"Applying the COO classifier","title":"Predicting COO for RNASeq data","text":"COO classifier can applied cds object using single command, coo_rnaseq(). example : returned object consists three columns: - Sample IDs, drawn column names cds object. - LPS - Linear Predictor Score, used split samples GCB ABC, - COO - Cell Origin classification; either GCB, ABC, Unclassified","code":"pred = coo_rnaseq(cds)"},{"path":"/articles/gneSeqCOO.html","id":"individual-coo-classifier-functions","dir":"Articles","previous_headings":"","what":"Individual COO classifier functions","title":"Predicting COO for RNASeq data","text":"classifier actually consists two steps, can run individually. example :","code":""},{"path":"/articles/gneSeqCOO.html","id":"step-1-normalize","dir":"Articles","previous_headings":"Individual COO classifier functions","what":"Step 1: Normalize","title":"Predicting COO for RNASeq data","text":"","code":"norm = coo_normalize(cds)"},{"path":"/articles/gneSeqCOO.html","id":"step-2-apply-the-classifier-","dir":"Articles","previous_headings":"Individual COO classifier functions","what":"Step 2: Apply the classifier.","title":"Predicting COO for RNASeq data","text":"default, uses built-“coo_GOYA_21gene” classifier, developed GOYA dataset. However, option supplying version classifier (example, genes available, gene model changes).","code":"pred = coo_predict(norm_main)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Bolen. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bolen C (2024). gneSeqCOO: RNASeq-based Cell Origin classifier. R package version 0.6.3.","code":"@Manual{,   title = {gneSeqCOO: An RNASeq-based Cell of Origin classifier},   author = {Chris Bolen},   year = {2024},   note = {R package version 0.6.3}, }"},{"path":"/reference/coo_GOYA_21gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary COO classifier — coo_GOYA_21gene","title":"Primary COO classifier — coo_GOYA_21gene","text":"'lm' object containing 21 gene COO classifier, developed GOYA  dataset. Two versions available, data processed either IGIS3.0 IGIS4.0","code":""},{"path":"/reference/coo_GOYA_21gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary COO classifier — coo_GOYA_21gene","text":"","code":"coo_GOYA_21gene_igis3  coo_GOYA_21gene_igis4"},{"path":"/reference/coo_GOYA_21gene.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Primary COO classifier — coo_GOYA_21gene","text":"object class 'lm'. Coefficients can viewed accessing    '$coefficients' slot. object class lm length 8.","code":""},{"path":"/reference/coo_GOYA_21gene.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Primary COO classifier — coo_GOYA_21gene","text":"Refer COO_Classifier.html file inst/reports details development model.","code":""},{"path":"/reference/coo_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"COO Normalization function — coo_normalize","title":"COO Normalization function — coo_normalize","text":"standard normalization function RNASeq data","code":""},{"path":"/reference/coo_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COO Normalization function — coo_normalize","text":"","code":"coo_normalize(cds)"},{"path":"/reference/coo_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"COO Normalization function — coo_normalize","text":"cds - DESeqDataSet object, raw counts \"counts\" slot.","code":""},{"path":"/reference/coo_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"COO Normalization function — coo_normalize","text":"normalized DESeqDataSet","code":""},{"path":"/reference/coo_normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"COO Normalization function — coo_normalize","text":"function applies robust library size normalization procedure    raw count matrix provided. goal specifically ensure     expression values data consistent scale, regardless     source dataset. details robust library size     normalization function, refer \"COO_Classifier\" supplemental     vignette. Please note rownames raw count matrix must either refseq     IDs ENSEMBL gene IDs. Gene symbols work. Notably, purposes machine learning, care     absolute expression genes, expression relative    samples. , combined fact people may know get    read lengths easily new data means skipping    normalization step involving read length.","code":""},{"path":"/reference/coo_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"COO prediction function — coo_predict","title":"COO prediction function — coo_predict","text":"Function predicting COO using normalized RNASeq dataset","code":""},{"path":"/reference/coo_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COO prediction function — coo_predict","text":"","code":"coo_predict(norm_eset, model)"},{"path":"/reference/coo_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"COO prediction function — coo_predict","text":"norm_eset normalized ExpressionSet, returned coo_normalize model fitted COO model.","code":""},{"path":"/reference/coo_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"COO prediction function — coo_predict","text":"matrix three columns:     * Sample names    * LPS score prediction    * COO class","code":""},{"path":"/reference/coo_predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"COO prediction function — coo_predict","text":"function uses model generated GOYA dataset      predict Cell Origin normalized expression dataset. subsetting      needs performed, expression matrix must either refseq      (e.g. \"geneID:00001\") ENSEMBL (e.g. ENSG....) gene IDs rownames","code":""},{"path":"/reference/coo_rnaseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Combined COO function — coo_rnaseq","title":"Combined COO function — coo_rnaseq","text":"wrapper running coo_normalize coo_predict together","code":""},{"path":"/reference/coo_rnaseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combined COO function — coo_rnaseq","text":"","code":"coo_rnaseq(cds)"},{"path":"/reference/coo_rnaseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combined COO function — coo_rnaseq","text":"cds - DESeqDataSet object, raw counts \"counts\" slot.","code":""},{"path":"/reference/coo_rnaseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combined COO function — coo_rnaseq","text":"matrix COO predictions. See coo_predict details","code":""},{"path":"/reference/coo_rnaseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combined COO function — coo_rnaseq","text":"function wrapper two core COO prediction functions.     function intentionally forces standard procedure      normalization modeling, give us best chance      model matching training data.","code":""},{"path":"/reference/get_id_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to guess the identifiers used in the model — get_id_type","title":"Attempt to guess the identifiers used in the model — get_id_type","text":"Function attempting guess identifier type","code":""},{"path":"/reference/get_id_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to guess the identifiers used in the model — get_id_type","text":"","code":"get_id_type(cds)"},{"path":"/reference/get_id_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to guess the identifiers used in the model — get_id_type","text":"cds - DESeqDataSet object, raw counts \"counts\" slot.","code":""},{"path":"/reference/get_id_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to guess the identifiers used in the model — get_id_type","text":"string IGIS version 3.0 4.0","code":""},{"path":"/reference/get_igis_ver.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to guess the IGIS version — get_igis_ver","title":"Attempt to guess the IGIS version — get_igis_ver","text":"Function attempting guess IGIS version","code":""},{"path":"/reference/get_igis_ver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to guess the IGIS version — get_igis_ver","text":"","code":"get_igis_ver(cds)"},{"path":"/reference/get_igis_ver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to guess the IGIS version — get_igis_ver","text":"cds - DESeqDataSet object, raw counts \"counts\" slot.","code":""},{"path":"/reference/get_igis_ver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to guess the IGIS version — get_igis_ver","text":"string IGIS version 3.0 4.0","code":""},{"path":"/reference/refLibrarySize.html","id":null,"dir":"Reference","previous_headings":"","what":"refLibrarySize — refLibrarySize","title":"refLibrarySize — refLibrarySize","text":"Function library ref size","code":""},{"path":"/reference/refLibrarySize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"refLibrarySize — refLibrarySize","text":"","code":"refLibrarySize(cds2, ident)"},{"path":"/reference/refLibrarySize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"refLibrarySize — refLibrarySize","text":"cds2 - DESeqDataSet object, raw counts \"counts\" slot. ident - Identifiers used dataset. one c(\"refseq\",\"ensembl\") provided, IGIS version inferred data.","code":""},{"path":"/reference/refLibrarySize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"refLibrarySize — refLibrarySize","text":"vector describing robust library size sample","code":""}]
